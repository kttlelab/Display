{"version":3,"sources":["assets/cloud.svg","services/firebase.js","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","this","initializeApp","database","firestore","apps","length","collection","document","doc","get","snapshot","exists","Promise","resolve","data","reject","value","result","forEach","push","key","id","filter","r","route","includes","downtown","latitude","longitude","distanceToBusTime","distance","nearByPoint","time","Math","abs","props","Number","toFixed","columns","dataField","text","sort","App","useState","moment","format","setTime","setInterval","vehicles","setVehicles","fetchVehicles","a","Firebase","getCollection","enhanced","map","d","estimation","A","B","num","sqrt","useEffect","half","className","style","display","justifyContent","flexDirection","marginBottom","src","logo","alt","color","slice","ceil","floor","index","striped","hover","rowStyle","textAlign","keyField","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7de886b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.6371448b.svg\";","import { apps, firestore, initializeApp } from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyDDDlQuhV1umenGHFK34ZoG4Ob7s3c3oW0\",\n  authDomain: \"ride-my-way-production.firebaseapp.com\",\n  databaseURL: \"https://ride-my-way-production.firebaseio.com\",\n  projectId: \"ride-my-way-production\",\n  storageBucket: \"ride-my-way-production.appspot.com\",\n  messagingSenderId: \"403153167805\",\n  appId: \"1:403153167805:web:16f3a010be3e6a58509ed4\",\n  measurementId: \"G-0T0VPJ35ZF\",\n};\n\nclass FirebaseService {\n  constructor() {\n    this.initializeApp();\n    this.database = firestore();\n  }\n\n  initializeApp() {\n    if (!apps.length) initializeApp(config);\n  }\n\n  async getDocument(collection, document) {\n    let snapshot;\n    try {\n      snapshot = await this.database.collection(collection).doc(document).get();\n      if (snapshot.exists) return Promise.resolve(snapshot.data());\n      return Promise.resolve(null);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  async getCollection(collection, { value = \"\" } = {}) {\n    try {\n      const snapshot = await this.database.collection(collection).get();\n      const result = [];\n      snapshot.forEach((doc) => {\n        result.push({ ...doc.data(), key: doc.id });\n      });\n      return result.filter((r) => r.route && r.route.includes(value));\n    } catch (e) {\n      return e;\n    }\n  }\n}\n\nexport default new FirebaseService();\n","export const downtown = {\n  latitude: -1.943378,\n  longitude: 30.057301,\n};\n\nexport const distanceToBusTime = (distance, nearByPoint) => {\n  let time = (distance * 1000) / 336;\n  if (nearByPoint) {\n    time = Math.abs(time - nearByPoint.props.distance);\n  }\n  if (time > 60) {\n    return `${Number(time / 60).toFixed(0)} H`;\n  }\n  return Number(time) >= 1 ? `${time.toFixed(0)} Min` : \"Almost here\";\n};\n\nexport const formatDistance = (num) => {\n  const distance = Number(num) * 100;\n  return distance.toFixed(2) / 0.5;\n};\n\nexport const ABDistance = (A, B) =>\n  Math.sqrt((A.latitude - B.latitude) ** 2 + (A.longitude - B.longitude) ** 2);\n","import moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./App.css\";\nimport logo from \"./assets/cloud.svg\";\nimport Firebase from \"./services/firebase\";\nimport { ABDistance, distanceToBusTime, downtown, formatDistance } from \"./utils\";\nconst columns = [\n  {\n    dataField: \"bus\",\n    text: \"BUS\",\n    sort: true,\n  },\n  {\n    dataField: \"route\",\n    text: \"ROUTE\",\n    sort: true,\n  },\n  {\n    dataField: \"estimation\",\n    text: \"NEXT BUS ARRIVES IN\",\n    sort: true,\n  },\n];\n\nconst App = () => {\n  const [time, setTime] = useState(moment().format(\"HH:mm:ss\"));\n  setInterval(() => setTime(moment().format(\"HH:mm:ss\")), 1000);\n  const [vehicles, setVehicles] = useState([]);\n  const fetchVehicles = async () => {\n    const data = await Firebase.getCollection(\"vehicles\", { value: \"downtown\" });\n    const enhanced = data.map((d) => ({\n      ...d,\n      estimation: distanceToBusTime(\n        formatDistance(ABDistance(downtown, { latitude: d.latitude, longitude: d.longitude }))\n      ),\n    }));\n    setVehicles(enhanced);\n  };\n  useEffect(fetchVehicles, []);\n  const half = vehicles.length / 2;\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div\n        className=\"flex horizontal\"\n        style={{ justifyContent: \"space-between\", marginBottom: \"2vh\" }}\n      >\n        <h1>ARRIVALS</h1>\n        <div className=\"flex horizontal\">\n          <img src={logo} alt=\"logo\" />\n          <h1>28&deg;C</h1>\n        </div>\n        <h1 style={{ color: \"red\" }}>{time}</h1>\n      </div>\n      <div className=\"flex horizontal\" style={{ justifyContent: \"space-between\" }}>\n        {[vehicles.slice(0, Math.ceil(half)), vehicles.slice(-Math.floor(half))].map(\n          (data, index) => (\n            <BootstrapTable\n              key={Number(index)}\n              striped\n              hover\n              rowStyle={{ textAlign: \"center\" }}\n              keyField={\"bus\"}\n              data={data}\n              columns={columns}\n            ></BootstrapTable>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}